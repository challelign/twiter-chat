generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  // id          String   @id
  id          String   @id @default(uuid())
  email       String   @unique
  username    String   @unique
  displayName String?
  bio         String?
  location    String?
  job         String?
  website     String?
  img         String?
  cover       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // RELATIONS
  posts Post[]

  likes Like[]

  saves SavedPosts[]

  followers  Follow[] @relation("UserFollowers")
  followings Follow[] @relation("UserFollowings")

  @@index([id]) // Faster querying of user's posts
}

model Post {
  // id          Int      @id @default(autoincrement())
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  desc        String?  @db.VarChar(255)
  img         String?
  imgHeight   Int?
  video       String?
  isSensitive Boolean  @default(false)

  // RELATIONS
  user   User   @relation(fields: [userId], references: [id])
  userId String

  // RePost Relationship (Self-Referential One-to-Many)
  // A post can be reposted multiple times (has many rePosts)

  // A repost references its original post through rePostId

  // Optional relationship (post might not be a repost)

  // Named relation "RePosts" to distinguish from other relationships
  rePostId String?
  rePost   Post?   @relation("RePosts", fields: [rePostId], references: [id], onDelete: Cascade)
  rePosts  Post[]  @relation("RePosts")

  // Comment Relationship (Self-Referential One-to-Many)
  //   A post can have multiple comments (has many comments)

  // A comment references its parent post through parentPostId

  // Optional relationship (post might not be a comment)

  // Named relation "PostComments" to distinguish from other relationships
  parentPostId String?
  parentPost   Post?   @relation("PostComments", fields: [parentPostId], references: [id], onDelete: Cascade)
  comments     Post[]  @relation("PostComments")

  likes Like[]

  saves SavedPosts[]

  @@index([userId]) // Faster querying of user's posts
  @@index([rePostId]) // Faster repost tracking
  @@index([parentPostId]) // Faster comment threads
}

model Like {
  // id        Int      @id @default(autoincrement())
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model SavedPosts {
  // id        Int      @id @default(autoincrement())
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  // RELATIONS
  userId String
  postId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Follow {
  // id        Int      @id @default(autoincrement())
  id String @id @default(uuid())

  createdAt DateTime @default(now())

  // RELATIONS
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowings", fields: [followingId], references: [id], onDelete: Cascade)
}
